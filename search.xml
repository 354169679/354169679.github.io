<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux编程学习笔记-fork函数和vfork函数</title>
      <link href="/2023/02/12/fork%E5%87%BD%E6%95%B0%E5%92%8Cvfork%E5%87%BD%E6%95%B0/"/>
      <url>/2023/02/12/fork%E5%87%BD%E6%95%B0%E5%92%8Cvfork%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="fork函数"><a href="#fork函数" class="headerlink" title="fork函数"></a>fork函数</h2><p>fork函数用于在已有的进程里创建子进程，属于unix系统调用。</p><p>通过fork创建出来的子进程，它会拷贝父进程的内存运行空间。</p><p>普通函数只会返回一种值，但是fork函数对于不同情况返回不同的值：</p><ol><li>fork函数调用失败时，返回-1。</li><li>当从子进程中返回时，返回0。</li><li>当从父进程中返回时，返回子进程pid。</li></ol><h2 id="vfork函数"><a href="#vfork函数" class="headerlink" title="vfork函数"></a>vfork函数</h2><p>vfork函数的功能与fork基本一样。</p><p>注意：使用vfork时，必须要用exec函数或exit函数来到达终止程序的目的，否则会abort。</p><p>唯有两点不同：</p><ol><li><p>fork出来的子进程，其进程的内存空间是父进程的副本，相当于会将父进程的内存空间拷贝一份。而vfork出来的子进程是直接运行在父进程的内存空间上的。</p></li><li><p>fork后的子进程根据操作系统的调度算法，可能会后运行，也可能先运行，两种情况都有可能。为了达到先让子进程运行完后再运行父进程的目的，需要调用wait函数来阻塞父进程。但是vfork不需要调用类似函数，vfork函数创建子进程后，会阻塞父进程，先让子进程运行完后在调度父进程。</p><p>还有其他细节等后续慢慢补充。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fork </tag>
            
            <tag> vfork </tag>
            
            <tag> Linux </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔六</title>
      <link href="/2023/01/28/%E9%9A%8F%E7%AC%94%E5%85%AD/"/>
      <url>/2023/01/28/%E9%9A%8F%E7%AC%94%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<p style="text-indent:2em">腊月二十九到大年初六，我在老家呆了整整7天。<p style="text-indent:2em">回老家和去武汉的路途，都是由姑父在接送我。姑父在武汉某出租车公司上班，当了好多年的出租车司机，他回去的时候一谈到武汉时，就跟我讲，他的脑子里就一张武汉地图，“武汉方圆几十公里，比上海还大”......看到他顶着黑眼圈开心的跟我说话时，我看到了成年人的隐忍负重的一面。我也很难想象到，他跟我提到的出租车行业也有如此黑暗的一面——疫情期间的出租车“月租费本该因为行情不好而下调，然而最后却是迫于政府对公司的多次催促，施压才象征性的下调了300块钱。就像是一群“吸血鬼”，这些资本家吸着老百姓们靠消耗自身精力和体力，工作长达13个小时而得来的回报......<p style="text-indent:2em">回到老家后，面对最多的问题就是，对象谈好了吗？<p style="text-indent:2em">毕竟今年也才刚开始上班，谈对象这种事情其实着急不得，因为爱情是可遇不可求的一件事，需要靠缘分，当然，假若缘分到了，也要牢牢把握住。择偶标准我一直都没有什么个界线，因为我现在也没搞清楚我到底适合找个什么样的女生陪我度过余生，我也很模糊，很迷茫。但是迷茫的同时又很谨慎，因为一旦确定关系之后，就是奔着结婚去的，而不是“小朋友过家家”。身边的亲戚也有几个离异的先例，看到他们的孩子，往往会感觉到，最惨的是小孩，他们在需要得到关爱（父爱或母爱）的年龄段时却无法被满足，而导致性格上的缺陷。<p style="text-indent:2em">和高中同学们的相聚也是短暂的，但也是最最惬意的，不讲究任何所谓的酒席规矩，也不被劝酒，随意地小酌两杯，跟他们聊聊过去的往事，和最近各自的新鲜事。即使大家现在不在一个城市了，平时也很少用手机聊天，但是见到面了还是能够无所不谈，会一起感慨着过去，幻想着未来如何如何。<p style="text-indent:2em">回到家了后，也看望了很多老人，他们也在随着我长大而慢慢变老。多多少少有一丝难过，也祝愿他们身体在新的一年，健健康康的就好。<blockquote><p>但愿人长久，千里共婵娟。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 感慨 </tag>
            
            <tag> 过年 </tag>
            
            <tag> 相聚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔五</title>
      <link href="/2023/01/15/%E9%9A%8F%E7%AC%94%E4%BA%94/"/>
      <url>/2023/01/15/%E9%9A%8F%E7%AC%94%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<p>明天又是星期一了，过几天就要放年假了。</p><p>年假做什么好呢，卷又卷不动，最近又很烦，没心思卷。</p><p>我是什么时候入的二次元这个坑？回想一下。</p><p>假如按二次元的真正定义来讲（动画，漫画，游戏），那么我应该是2016年底入坑的吧，那时基友喊我去看《你的名字》，打心里讲，那时对日漫的印象一直停留在哆啦A梦和名侦探柯南这个层面上，对于真正的短篇番剧并没有怎么接触过，但是看完《你的名字》之后，我受到很大的震撼，我没有想过，原来动漫也可以用这么高的质量呈现在眼前——星空、湖泊、森林、小镇、城市。这些元素通过动漫的形式展现出来好像不比现实生活中的差，反而还多了一丝艺术，浪漫的气息。当中动漫电影的艺术感反而给我带来了很多令我意想不到的一面，让我如今对2016年年底那场电影依旧历历在目。</p><p>后来我接着去B站注册了账号，追完了属于我的第一个番剧——《俺妹》。因为算是半个催泪番，所以我欲罢不能，接着看了那时2017一直霸榜B站前三的搞笑番剧——《在下坂本，有何贵干》，看的我眼泪都笑出来了。后来接着追了《re0》《刀剑神域》等等一些动漫圈比较出名的番剧。</p><p>嗯，没错，我觉得，我的人生也不算遗憾吧，起码看了那么多有趣番剧，那么多让人感到振奋的番剧，那么多让人感到感动的番剧。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 番剧 </tag>
            
            <tag> 入坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习笔记-[bx]和loop指令</title>
      <link href="/2023/01/15/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-bx-%E5%92%8Cloop%E6%8C%87%E4%BB%A4/"/>
      <url>/2023/01/15/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-bx-%E5%92%8Cloop%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,[0]//表示以ds:[0]为开头的字型长度的数据存入到ax中</span><br><span class="line">mov al,[0]//表示以ds:[0]为开头的字符型长度的数据存入到al中</span><br><span class="line">mov ax,[bx]//表示以ax:[bx]为开头的字型长度的数据存入到ax中</span><br></pre></td></tr></table></figure><p>在汇编源程序中，数据不能以字母开头。</p><p>编程计算2^12</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,2</span><br><span class="line">mov cx,11</span><br><span class="line">s:add ax,ax</span><br><span class="line">loops</span><br></pre></td></tr></table></figure><p>编程计算123*236</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov ax,236</span><br><span class="line">movcx,122</span><br><span class="line">s:addax,ax</span><br><span class="line">loops</span><br></pre></td></tr></table></figure><p>计算ffff:0006单元的数乘于3，结果存储在dx中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0ffffh</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,0</span><br><span class="line">mov al,ds:[6]//同mov bx,6  mov al,[bx]</span><br><span class="line">mov cx,3</span><br><span class="line">mov dx,0</span><br><span class="line">s:add dx,ax</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure><p>如果[]中是常量，则需要使用显式的ds:[]来说明，否则[0]代表0，并非ds:0的意思。</p>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习笔记-包含多个段的程序</title>
      <link href="/2023/01/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8C%85%E5%90%AB%E5%A4%9A%E4%B8%AA%E6%AE%B5%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/01/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8C%85%E5%90%AB%E5%A4%9A%E4%B8%AA%E6%AE%B5%E7%9A%84%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>先看一段代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dw 0123h,0456h,01bch,0222h</span><br><span class="line"></span><br><span class="line">movbx,0</span><br><span class="line">mov ax,0</span><br><span class="line"></span><br><span class="line">mov cx,4</span><br><span class="line"></span><br><span class="line">s:add ax,cs:[bx]</span><br><span class="line">addbx,2</span><br><span class="line"></span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure><p>dw（define word）为定义字型数据的意思，用于在程序的数据段空间中定义一系列的数据。程序中的意思就是，在系统为该程序分配的内存空间代码段中，定义0123h,0456h,01bch,0222h这些数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line"></span><br><span class="line">dw 1234h,2435h,3255h</span><br><span class="line"></span><br><span class="line">start: mov bx,0</span><br><span class="line">       mov ax,0</span><br><span class="line">       </span><br><span class="line">       mov cx,8</span><br><span class="line">     s:add ax,cs:[bx]</span><br><span class="line">       add bx,2</span><br><span class="line">       loop s</span><br><span class="line">       </span><br><span class="line">       mov ax,4c00h</span><br><span class="line">       int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure><p>end start中的伪指令start的作用就是告诉编译器，程序要执行的第一个指令从哪一句开始。</p><p>start用于指明汇编程序的入口。end伪指令可以通知编译器程序的入口在哪里。</p><p>start:就是开始的部分。在此部分代码中，dw也意味着是在内存空间中开辟了3个字型大小的空间。</p>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习笔记-第一个程序</title>
      <link href="/2023/01/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/"/>
      <url>/2023/01/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="汇编源代码到可执行程序的过程"><a href="#汇编源代码到可执行程序的过程" class="headerlink" title="汇编源代码到可执行程序的过程"></a>汇编源代码到可执行程序的过程</h2><p>文本编辑好源程序，然后编译链接，再执行。</p><p>分析一段源程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">assume cs:codesg</span><br><span class="line"></span><br><span class="line">codesg segment</span><br><span class="line">mov ax,0123h</span><br><span class="line">mov bx,1343h</span><br><span class="line">add ax,bx</span><br><span class="line">add ax,ax</span><br><span class="line"></span><br><span class="line">mov ax,ax</span><br><span class="line">int 21H</span><br><span class="line"></span><br><span class="line">codesg ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>1.伪指令</p><p>（1）段名segment</p><p>（2）段名ends</p><p>汇编指令（代码）至少需要一个段来存储。</p><p>（3）end</p><p>表示汇编程序的结束</p><p>（4）assume</p><p>编程实现2^3</p><pre><code>assume cs:codesgcodesg segmentmov ax,0002hadd ax,axadd ax,axmovax,4c00hint 21Hcodesg endsend</code></pre><p>程序在装载到内存后，这段内存的前256个字节的区域会被用于DOS和程序之间通信。</p>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔四</title>
      <link href="/2023/01/08/%E9%9A%8F%E7%AC%94%E5%9B%9B/"/>
      <url>/2023/01/08/%E9%9A%8F%E7%AC%94%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<p style="text-indent:2em">我正在听着未闻花名的主题曲secret base~，写着随笔。<p style="text-indent:2em">不知为啥，最近情绪时而高涨时而低落，很不稳定。<p style="text-indent:2em">但是听下歌之后就会好很多，恢复到比较平静的状态。<p style="text-indent:2em">这曲儿听着听着，会让我莫名其妙想到自己高中和大学的点点滴滴，回想着自己大学追了好多好多动漫，看了好多好多电影，认识了好多好多人，但是如今已是物是人非，我也没有当初像那时一般，有着稚嫩和单纯的思维，一切都变了，很难回到过去的样子，因为或许对我来说，有些情况下，好像过去的我反而比现在的我要强很多倍，但是，有些方面，现在的我又有着一些以前的我所没有的能力。<blockquote><p>回忆往往是美好的，也是痛苦的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习笔记-内存访问</title>
      <link href="/2023/01/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE/"/>
      <url>/2023/01/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="DS和-address"><a href="#DS和-address" class="headerlink" title="DS和[address]"></a>DS和[address]</h2><p style="text-indent:2em">DS寄存器用于存储段地址，用于读写内存地址。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov ax,0001h</span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,[0]</span><br></pre></td></tr></table></figure><p style="text-indent:2em">其中，[0]为偏移地址，表示偏移0个单元地址。将10：0处的数据赋给ax<p style="text-indent:2em">将al中的数据送入内存单元10000H中，代码如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movax,1000h</span><br><span class="line">mov ds,ax</span><br><span class="line">mov [0],al</span><br></pre></td></tr></table></figure><h2 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h2><p style="text-indent:2em">累加数据段中的前3个字型数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">movax,1000h</span><br><span class="line">movds,ax</span><br><span class="line">mov ax,0</span><br><span class="line">movax,[0]</span><br><span class="line">add ax,[2]</span><br><span class="line">add ax,[4]</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push ax//表示将ax的数据压入栈中</span><br><span class="line">pop ax//表示将栈中的数据出栈到ax寄存器中</span><br></pre></td></tr></table></figure><p>8086cpu的入栈和出栈都是以字型为单位。</p><p>栈相关的寄存器：ss和sp。</p>]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习笔记-寄存器</title>
      <link href="/2023/01/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%AF%84%E5%AD%98%E5%99%A8/"/>
      <url>/2023/01/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%AF%84%E5%AD%98%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p style="text-indent:2em">寄存器用于存储信息用的。<p style="text-indent:2em">通用寄存器有4个，分别是：AX、BX、CX、DX。这些寄存器都是16位的，可以存储2个字节大小的数据。16位的寄存器最大值能存储656535。<p style="text-indent:2em">每个寄存器又都可以分为低位和高位。比如AX寄存器可以被分为AL和AH，这两个可以用于存储8位二进制数据。<p><img src="https://i.328888.xyz/2023/01/08/kuhtv.png"></p><h2 id="字（word）在寄存器中的存储"><a href="#字（word）在寄存器中的存储" class="headerlink" title="字（word）在寄存器中的存储"></a>字（word）在寄存器中的存储</h2><p style="text-indent:2em">对于8086cpu来说，因为它的寄存器都是16位的，但是又要兼容上一代的cpu，因此它有两种用法，一个是可以处理8位的数据，就是一个字节；另一个处理方式就是可以一次处理16位的数据，就是一个字。<p style="text-indent:2em">在使用mov等指令时，需要根据指令的寄存器大小来进行存取数据，比如：<blockquote><p>movax,001ah&#x2F;&#x2F;ax变成了001a</p><p>moval,0158h&#x2F;&#x2F;al只有8位，所以会丢掉158的‘1’那位</p></blockquote><p style="text-indent:2em">因此，操作寄存器时，不要把不符合寄存器大小的值置于寄存器中。<p>编程计算2的4次方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movax,0002h</span><br><span class="line">add ax,ax</span><br><span class="line">add ax,ax</span><br><span class="line">add ax,ax</span><br></pre></td></tr></table></figure><h2 id="8086cpu给出物理地址的方法"><a href="#8086cpu给出物理地址的方法" class="headerlink" title="8086cpu给出物理地址的方法"></a>8086cpu给出物理地址的方法</h2><p style="text-indent:2em">物理地址=段地址x16+偏移地址<p style="text-indent:2em">段地址x16就是对段地址左移4位<h2 id="CS和IP"><a href="#CS和IP" class="headerlink" title="CS和IP"></a>CS和IP</h2><p style="text-indent:2em">CS位段寄存器，IP位指针寄存器。那么，cpu当前指向的内存单元为：CSx16+IP。cpu在工作时，将cs:ip指向的内容当作指令执行。<p style="text-indent:2em">jmp指令可以修改cs和IP的内容]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言学习笔记-基础知识</title>
      <link href="/2023/01/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/01/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h2><p style="text-indent:2em">机器语言是指一种由0和1组成的机器指令，计算机只“认识”这种语言，像自然语言，编程语言等，计算机是不认识的，我们所写的代码最后都会被转化位计算机指令，即机器语言。<p style="text-indent:2em">负责运行这些指令的，就是我们电脑的CPU（又叫做中央处理单元，叫法真高级）啦。<h2 id="汇编语言的产生"><a href="#汇编语言的产生" class="headerlink" title="汇编语言的产生"></a>汇编语言的产生</h2><p style="text-indent:2em">汇编指令呢，通俗的来讲，他就是另一种计算机指令，只不过啊，这种指令需要通过“中间层”来转换一下，这个中间层叫编译器，用于把汇编指令转换成计算机所能读懂的机器指令，而且为什么要用汇编指令？因为汇编指令比机器指令更好理解，机器指令全是由1和0表示的，那读着太累了，也很不方便。<p><img src="https://i.328888.xyz/2023/01/08/kYmHN.png"></p><h2 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h2><p style="text-indent:2em">计算机的内存被分为若干个存储单元，每个单元占一个字节（Byte）。一个存储单元占8位（bit）二进制，即有8个0或1组成。计算机的存储器，都以字节为最小单位进行计算。<blockquote><p>1KB &#x3D; 1024B<br>1MB &#x3D; 1024KB<br>1GB &#x3D; 1024MB<br>1TB &#x3D; 1024GB</p></blockquote><h2 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h2><p style="text-indent:2em">cpu对某个地址进行读写操作必须要知道如下几点<ul><li>向哪个地址进行读写？（地址问题）</li><li>向地址中读写什么数据？（数据问题）</li><li>向那个器件（计算机包括很多类型的存储器，比如：内存，显存等）进行读写？是读还是写操作（控制问题）</li></ul><p style="text-indent:2em">因此，我们衍生出了以下几种总线概念来解决上述问题。<ul><li>地址总线</li><li>数据总线</li><li>控制总线</li></ul><h2 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h2><p style="text-indent:2em">地址总线能传递多少种不同的信息，那么cpu就可以寻址到多大的内存单位。比如说：一位二进制只能表示两种不同的信息，即0和1。因此，咱们的cpu只能寻址到两个地址单元。<p style="text-indent:2em">那么两位二进制呢，三位二进制呢，它们分别能传递多少种不同的信息。排列组合计算。<p><strong>2的N次方</strong></p><h2 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h2><p style="text-indent:2em">数据总线宽度决定了cpu和内存之间传输数据的最大值。8根数据总线可以代表8位二进制，以为8位二进制等于一个字节的大小，因此它们之间最大最大，每次可以传输一个字节大小的数据。像两个字节的数据，需要传输两次才能传完。<h2 id="地址内存空间"><a href="#地址内存空间" class="headerlink" title="地址内存空间"></a>地址内存空间</h2><p style="text-indent:2em">一个计算机的cpu要管理很多的部件，比如：显卡，内存条，硬盘，网卡。这些设备都有自己的内存空间，因此，cpu会把它组成一个内存地址空间来看待，只不过是说，这个内存地址空间被分成了一部分一部分的，每个部分的地址都管理着不同设备的内存信息。]]></content>
      
      
      <categories>
          
          <category> 汇编语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer学习笔记-基础类型</title>
      <link href="/2023/01/08/C-Primer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/01/08/C-Primer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<ul><li><p>算数类型有整形，浮点型，字符，布尔类型。</p></li><li><p>空类型，即void。</p></li><li><p>其中，整形和浮点型包含带符号和不带符号（unsigned）。带符号的类型可以表示正数、负数和0，无符号类型只能表示0和正数。</p></li><li><p>正常的情况下，字符类型一般占一个字节，即8Bits，unsigne char一般表示整型0-255的范围，char一般表示为-127-127的范围。</p></li><li><p>类型转换包括隐式转换和显式转换两种，这里先讲隐式转换，当中比较重要的一点就是，当我们给一个无符号类型的变量赋一个超出它本身范围的值时，其结果会变成初始值对该无符号类型范围最大值取模后的余数。例如，-1赋给unsigned时，-1%256&#x3D;255，结果为255。</p><p>举一些比较有意思的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> u=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> i=<span class="number">-42</span>;</span><br><span class="line">std::cout&lt;&lt;u+i&lt;&lt;std::endl; </span><br></pre></td></tr></table></figure><p>当上面的u与i相加时，i会转变成无符号类型unsigned int，把-42赋给无符号类型整数，然后再与u相加，得出一个非预期的结果，具体需要看机器是多少位的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> i=<span class="number">10</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">  std::cout&lt;&lt;i&lt;&lt;std::endl; </span><br></pre></td></tr></table></figure><p>上面的结果是：循环永远不会结束。因为在循环到-1时，unsigned没法表示-1，因此会将-1转换成unsigned int类型，得出一个很大的整数，最后导致死循环。 </p><blockquote><p>切勿混用带符号类型和无符号类型。</p></blockquote></li><li><p>字面值常量表示的是值的本身，如42表示整型字面量，true表示bool型字面量</p></li><li><p>整型字面量可以用十进制，八进制（0开头），十六进制（0x或0X开头）来表示，如42，042，0xF等。 </p></li><li><p>字符串字面值结尾会带’\0’来标识字符串结束，单引号用于表示单个字符，双引号用于表示单个字符串。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">std::string str = <span class="string">&quot;a string&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;a long string string string&quot;</span></span><br><span class="line">  <span class="string">&quot;string a string &quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">//遇到过长的字符串时，可以分多行来进行表示</span></span><br><span class="line"><span class="comment">//上述表示&quot;a long string string string string a string&quot;这单独的一个字符串</span></span><br></pre></td></tr></table></figure><ul><li>转义字符用于表示一类特殊含义的字符和一类特殊标点符号的字符（？等）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔三</title>
      <link href="/2023/01/07/%E9%9A%8F%E7%AC%94%E4%B8%89/"/>
      <url>/2023/01/07/%E9%9A%8F%E7%AC%94%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p style="text-indent:2em">前段时间在B站写专栏，发现了一个很头疼的问题：每篇文章在提交审核通过后只允许修改三次（吐血），我就想着找另外一些方式来记录博客。<p style="text-indent:2em">在跟同学谈到写博客方面时，同学说我为啥不自己搭建一个私人博客。我想了想，哎，也对啊，无非就是又要去学一些新技术而已，问题不大，于是抱着试一试的想法，查阅了相关资料。<p style="text-indent:2em">网上的大佬很给了很多相关建议，大致有两种方案：要么就是自己买个服务器和域名，自己写页面和后台逻辑，要么就是用GitHub来搭。前一种的思路倒是很寻常的一种方式，但是后面一种我是压根听都没听说过，于是乎，我又查阅了一些相关的案例，发现用GitHub搭建起来几乎0成本，而且学习成本也不大。头一次接触到Hexo框架，对我来说，这玩意真是个新奇事儿。啪的一下很快啊，我就开始着手修改相关配置文件和学了一些markdown的用法，就有了现在这样的Bolg。<p style="text-indent:2em">建这个Bolg基本没有用到什么非常有含金量的技术，主要就是改改yaml配置文件（我压根就没学过yaml，学了也忘了），而且公司的事情很多，加上我只想多写些博客，专注于博客的内容，而不是真跑去重新捡回学过的前端知识，那样太费劲了！俺暂时还不想花那么多时间学这些用不上的知识，毕竟我的主攻方向是Linux开发方面。<p style="text-indent:2em">好了，也就唠嗑唠到这了，也感谢那些在我B站博客下面学习的小伙伴们在支持着我（虽然只有每篇文章评价只十几的浏览量），想要看我的文章，请后续继续关注本站，本站也不停地完善中，后面会越来越花里胡哨（滑稽）。]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔二</title>
      <link href="/2023/01/02/%E9%9A%8F%E7%AC%94%E4%BA%8C/"/>
      <url>/2023/01/02/%E9%9A%8F%E7%AC%94%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p style="text-indent:2em">新的一年，希望各位都能有个新的开始。我在新年的第一天就风尘仆仆地赶回老家，参加完高中同学的婚礼后，又急匆匆地回到了武汉。<p style="text-indent:2em">路途虽然遥远，但也饶有风趣：坐地铁头次被一群老外围着问江汉路站台的位置在哪，却羞于表达而紧张到答非所问，导致自己开始怀疑自己的英语水平，好像白学了那么多年英语；久别重逢的好基友预定好了酒店后，翻来覆去睡不着，便不停地闲聊过去的往事，直至凌晨才睡；被新郎点上台抢新娘子的手捧花，却没有抢到。<p style="text-indent:2em">老同学们那熟悉的面孔让我回忆起高中的很多陈年旧事，以及他们与我一起经历过的快乐和痛苦。眼看着身边的同学一个个都步入婚姻的殿堂，他们在婚礼舞台上那掩饰不住的笑容，心里也不由得为他们感到高兴，这也意味着大家结婚后都会更倾向于过好各自的小日子，相聚机会也会越来越少，待到重逢之时又是何年何月?或许这也是常态吧，毕竟每个人都要为生活四处奔波，天下也没有不散的宴席。再转过头来看看自己，想要亲身体验到这种幸福感还有很远的路要走。 <blockquote><p>有人住高楼，有人在深沟，有人光万丈，有人一身锈，世人万千种，浮云莫去求，斯人若彩虹，遇上方知有。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 感慨 </tag>
            
            <tag> 婚姻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔一</title>
      <link href="/2022/12/27/%E9%9A%8F%E7%AC%94%E4%B8%80/"/>
      <url>/2022/12/27/%E9%9A%8F%E7%AC%94%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p style="text-indent:2em">前段时间，突然阳了，便请假回家休息了大概一个星期左右。在家休息的这段时间让我看清了同事之间所谓的人间情怀。<p style="text-indent:2em">平日里那些跟我无所不谈，关系融洽的同事们，没有一个对我的身体情况以及恢复的如何感兴趣，领导也在督促着我要完成该要完成的任务，貌似对我阳了的事情并不怎么关心。我一直寻思着，平时我都待这些同事不薄，都会尽力地想着与他们好好去相处，但在我遇到困难之时，一个个就想要疏远我，但是想想就觉得没啥，因为想的太多又过于自作多情。只不过是对于周围同事的这种为人处世态度，感到诧异。<p style="text-indent:2em">生而为人，我们之间多多少少需要些“人情味”，毕竟不是冷血动物，能认识就是一种缘分。<blockquote><p>在最艰难的时刻我们要建立人与人之间的连接，相互扶持相互鼓励。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 人情世故 </tag>
            
            <tag> 感慨 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
