{"meta":{"title":"huijiang的记事本","subtitle":"hello","description":"yyds","author":"huijiang","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2018-01-04T16:00:00.000Z","updated":"2023-01-06T23:38:04.432Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2023-01-07T01:55:25.591Z","updated":"2023-01-07T01:55:25.591Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"Hello，欢迎访问灰酱的小破站。灰酱现在是一名刚毕业半年出来上班就受到社会的各种毒打的小萌新，博客会不定时更新，主要分享技术方面和我的日常。"},{"title":"标签","date":"2018-01-04T16:00:00.000Z","updated":"2023-01-06T23:42:03.824Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"随笔五","slug":"随笔五","date":"2023-01-15T14:23:34.000Z","updated":"2023-01-19T13:30:57.871Z","comments":true,"path":"2023/01/15/随笔五/","link":"","permalink":"http://example.com/2023/01/15/%E9%9A%8F%E7%AC%94%E4%BA%94/","excerpt":"","text":"明天又是星期一了，过几天就要放年假了。 年假做什么好呢，卷又卷不动，最近又很烦，没心思卷。 我是什么时候入的二次元这个坑？回想一下。 假如按二次元的真正定义来讲（动画，漫画，游戏），那么我应该是2016年底入坑的吧，那时基友喊我去看《你的名字》，打心里讲，那时对日漫的印象一直停留在哆啦A梦和名侦探柯南这个层面上，对于真正的短篇番剧并没有怎么接触过，但是看完《你的名字》之后，我受到很大的震撼，我没有想过，原来动漫也可以用这么高的质量呈现在眼前——星空、湖泊、森林、小镇、城市。这些元素通过动漫的形式展现出来好像不比现实生活中的差，反而还多了一丝艺术，浪漫的气息。当中动漫电影的艺术感反而给我带来了很多令我意想不到的一面，让我如今对2016年年底那场电影依旧历历在目。 后来我接着去B站注册了账号，追完了属于我的第一个番剧——《俺妹》。因为算是半个催泪番，所以我欲罢不能，接着看了那时2017一直霸榜B站前三的搞笑番剧——《在下坂本，有何贵干》，看的我眼泪都笑出来了。后来接着追了《re0》《刀剑神域》等等一些动漫圈比较出名的番剧。 嗯，没错，我觉得，我的人生也不算遗憾吧，起码看了那么多有趣番剧，那么多让人感到振奋的番剧，那么多让人感到感动的番剧。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"http://example.com/tags/%E6%97%A5%E5%B8%B8/"},{"name":"番剧","slug":"番剧","permalink":"http://example.com/tags/%E7%95%AA%E5%89%A7/"},{"name":"入坑","slug":"入坑","permalink":"http://example.com/tags/%E5%85%A5%E5%9D%91/"}]},{"title":"汇编语言学习笔记-[bx]和loop指令","slug":"汇编语言学习笔记-bx-和loop指令","date":"2023-01-15T11:29:03.000Z","updated":"2023-01-15T12:21:40.661Z","comments":true,"path":"2023/01/15/汇编语言学习笔记-bx-和loop指令/","link":"","permalink":"http://example.com/2023/01/15/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-bx-%E5%92%8Cloop%E6%8C%87%E4%BB%A4/","excerpt":"","text":"123mov ax,[0]//表示以ds:[0]为开头的字型长度的数据存入到ax中mov al,[0]//表示以ds:[0]为开头的字符型长度的数据存入到al中mov ax,[bx]//表示以ax:[bx]为开头的字型长度的数据存入到ax中 在汇编源程序中，数据不能以字母开头。","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"汇编","slug":"汇编","permalink":"http://example.com/tags/%E6%B1%87%E7%BC%96/"}]},{"title":"汇编语言学习笔记-包含多个段的程序","slug":"汇编语言学习笔记-包含多个段的程序","date":"2023-01-10T13:57:33.000Z","updated":"2023-01-15T14:25:15.360Z","comments":true,"path":"2023/01/10/汇编语言学习笔记-包含多个段的程序/","link":"","permalink":"http://example.com/2023/01/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8C%85%E5%90%AB%E5%A4%9A%E4%B8%AA%E6%AE%B5%E7%9A%84%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"先看一段代码 1234567891011121314 dw 0123h,0456h,01bch,0222h mov bx,0 mov ax,0 mov cx,4s: add ax,cs:[bx] add bx,2 loop s mov ax,4c00h int 21h dw（define word）为定义字型数据的意思，用于在程序的数据段空间中定义一系列的数据。程序中的意思就是，在系统为该程序分配的内存空间代码段中，定义0123h,0456h,01bch,0222h这些数据。 12345678910111213141516171819assume cs:codecode segment dw 1234h,2435h,3255h start: mov bx,0 mov ax,0 mov cx,8 s:add ax,cs:[bx] add bx,2 loop s mov ax,4c00h int 21h code end end start end start中的伪指令start的作用就是告诉编译器，程序要执行的第一个指令从哪一句开始。start:就是开始的部分。在此部分代码中，dw也意味着是在内存空间中开辟了3个字型大小的空间。","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"汇编","slug":"汇编","permalink":"http://example.com/tags/%E6%B1%87%E7%BC%96/"}]},{"title":"汇编语言学习笔记-第一个程序","slug":"汇编语言学习笔记-第一个程序","date":"2023-01-10T13:45:04.000Z","updated":"2023-01-10T13:55:29.432Z","comments":true,"path":"2023/01/10/汇编语言学习笔记-第一个程序/","link":"","permalink":"http://example.com/2023/01/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"汇编源代码到可执行程序的过程文本编辑好源程序，然后编译链接，再执行。 分析一段源程序 12345678910111213assume cs:codesgcodesg segment mov ax,0123h mov bx,1343h add ax,bx add ax,ax mov ax,ax int 21Hcodesg endsend","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"汇编","slug":"汇编","permalink":"http://example.com/tags/%E6%B1%87%E7%BC%96/"}]},{"title":"随笔四","slug":"随笔四","date":"2023-01-08T14:38:59.000Z","updated":"2023-01-10T13:17:49.953Z","comments":true,"path":"2023/01/08/随笔四/","link":"","permalink":"http://example.com/2023/01/08/%E9%9A%8F%E7%AC%94%E5%9B%9B/","excerpt":"","text":"我正在听着未闻花名的主题曲secret base~，写着随笔。 不知为啥，最近情绪时而高涨时而低落，很不稳定。 但是听下歌之后就会好很多，恢复到比较平静的状态。 这曲儿听着听着，会让我莫名其妙想到自己高中和大学的点点滴滴，回想着自己大学追了好多好多动漫，看了好多好多电影，认识了好多好多人，但是如今已是物是人非，我也没有当初像那时一般，有着稚嫩和单纯的思维，一切都变了，很难回到过去的样子，因为或许对我来说，有些情况下，好像过去的我反而比现在的我要强很多倍，但是，有些方面，现在的我又有着一些以前的我所没有的能力。 回忆往往是美好的，也是痛苦的。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"http://example.com/tags/%E6%97%A5%E5%B8%B8/"},{"name":"心情","slug":"心情","permalink":"http://example.com/tags/%E5%BF%83%E6%83%85/"}]},{"title":"汇编语言学习笔记-内存访问","slug":"汇编语言学习笔记-内存访问","date":"2023-01-08T13:40:56.000Z","updated":"2023-01-15T11:24:14.355Z","comments":true,"path":"2023/01/08/汇编语言学习笔记-内存访问/","link":"","permalink":"http://example.com/2023/01/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE/","excerpt":"","text":"DS和[address]DS寄存器用于存储段地址，用于读写内存地址。 123mov ax,0001hmov ds,axmov ax,[0] 其中，[0]为偏移地址，表示偏移0个单元地址。将10：0处的数据赋给ax 将al中的数据送入内存单元10000H中，代码如下： 123mov ax,1000hmov ds,axmov [0],al 数据段累加数据段中的前3个字型数据 123456mov ax,1000hmov ds,axmov ax,0mov ax,[0]add ax,[2]add ax,[4] 栈12push ax//表示将ax的数据压入栈中pop ax//表示将栈中的数据出栈到ax寄存器中 8086cpu的入栈和出栈都是以字型为单位。 栈相关的寄存器：ss和sp。","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"汇编","slug":"汇编","permalink":"http://example.com/tags/%E6%B1%87%E7%BC%96/"}]},{"title":"汇编语言学习笔记-寄存器","slug":"汇编语言学习笔记-寄存器","date":"2023-01-08T12:06:11.000Z","updated":"2023-01-08T13:42:19.870Z","comments":true,"path":"2023/01/08/汇编语言学习笔记-寄存器/","link":"","permalink":"http://example.com/2023/01/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%AF%84%E5%AD%98%E5%99%A8/","excerpt":"","text":"通用寄存器寄存器用于存储信息用的。 通用寄存器有4个，分别是：AX、BX、CX、DX。这些寄存器都是16位的，可以存储2个字节大小的数据。16位的寄存器最大值能存储656535。 每个寄存器又都可以分为低位和高位。比如AX寄存器可以被分为AL和AH，这两个可以用于存储8位二进制数据。 字（word）在寄存器中的存储对于8086cpu来说，因为它的寄存器都是16位的，但是又要兼容上一代的cpu，因此它有两种用法，一个是可以处理8位的数据，就是一个字节；另一个处理方式就是可以一次处理16位的数据，就是一个字。 在使用mov等指令时，需要根据指令的寄存器大小来进行存取数据，比如： mov ax,001ah &#x2F;&#x2F;ax变成了001a mov al,0158h &#x2F;&#x2F;al只有8位，所以会丢掉158的‘1’那位 因此，操作寄存器时，不要把不符合寄存器大小的值置于寄存器中。 编程计算2的4次方： 1234mov ax,0002hadd ax,axadd ax,axadd ax,ax 8086cpu给出物理地址的方法物理地址=段地址x16+偏移地址 段地址x16就是对段地址左移4位 CS和IPCS位段寄存器，IP位指针寄存器。那么，cpu当前指向的内存单元为：CSx16+IP。cpu在工作时，将cs:ip指向的内容当作指令执行。 jmp指令可以修改cs和IP的内容","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"汇编","slug":"汇编","permalink":"http://example.com/tags/%E6%B1%87%E7%BC%96/"}]},{"title":"汇编语言学习笔记-基础知识","slug":"汇编语言学习笔记-基础知识","date":"2023-01-08T09:55:44.000Z","updated":"2023-01-08T12:29:34.279Z","comments":true,"path":"2023/01/08/汇编语言学习笔记-基础知识/","link":"","permalink":"http://example.com/2023/01/08/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"机器语言机器语言是指一种由0和1组成的机器指令，计算机只“认识”这种语言，像自然语言，编程语言等，计算机是不认识的，我们所写的代码最后都会被转化位计算机指令，即机器语言。 负责运行这些指令的，就是我们电脑的CPU（又叫做中央处理单元，叫法真高级）啦。 汇编语言的产生汇编指令呢，通俗的来讲，他就是另一种计算机指令，只不过啊，这种指令需要通过“中间层”来转换一下，这个中间层叫编译器，用于把汇编指令转换成计算机所能读懂的机器指令，而且为什么要用汇编指令？因为汇编指令比机器指令更好理解，机器指令全是由1和0表示的，那读着太累了，也很不方便。 存储单元计算机的内存被分为若干个存储单元，每个单元占一个字节（Byte）。一个存储单元占8位（bit）二进制，即有8个0或1组成。计算机的存储器，都以字节为最小单位进行计算。 1KB &#x3D; 1024B1MB &#x3D; 1024KB1GB &#x3D; 1024MB1TB &#x3D; 1024GB CPU对存储器的读写cpu对某个地址进行读写操作必须要知道如下几点 向哪个地址进行读写？（地址问题） 向地址中读写什么数据？（数据问题） 向那个器件（计算机包括很多类型的存储器，比如：内存，显存等）进行读写？是读还是写操作（控制问题） 因此，我们衍生出了以下几种总线概念来解决上述问题。 地址总线 数据总线 控制总线 地址总线地址总线能传递多少种不同的信息，那么cpu就可以寻址到多大的内存单位。比如说：一位二进制只能表示两种不同的信息，即0和1。因此，咱们的cpu只能寻址到两个地址单元。 那么两位二进制呢，三位二进制呢，它们分别能传递多少种不同的信息。排列组合计算。 2的N次方 数据总线数据总线宽度决定了cpu和内存之间传输数据的最大值。8根数据总线可以代表8位二进制，以为8位二进制等于一个字节的大小，因此它们之间最大最大，每次可以传输一个字节大小的数据。像两个字节的数据，需要传输两次才能传完。 地址内存空间一个计算机的cpu要管理很多的部件，比如：显卡，内存条，硬盘，网卡。这些设备都有自己的内存空间，因此，cpu会把它组成一个内存地址空间来看待，只不过是说，这个内存地址空间被分成了一部分一部分的，每个部分的地址都管理着不同设备的内存信息。","categories":[{"name":"汇编语言","slug":"汇编语言","permalink":"http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"汇编","slug":"汇编","permalink":"http://example.com/tags/%E6%B1%87%E7%BC%96/"}]},{"title":"C++ Primer学习笔记-基础类型","slug":"C-Primer学习笔记-基础类型","date":"2023-01-08T06:53:05.000Z","updated":"2023-01-08T12:28:21.759Z","comments":true,"path":"2023/01/08/C-Primer学习笔记-基础类型/","link":"","permalink":"http://example.com/2023/01/08/C-Primer%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"算数类型有整形，浮点型，字符，布尔类型。 空类型，即void。 其中，整形和浮点型包含带符号和不带符号（unsigned）。带符号的类型可以表示正数、负数和0，无符号类型只能表示0和正数。 正常的情况下，字符类型一般占一个字节，即8Bits，unsigne char一般表示整型0-255的范围，char一般表示为-127-127的范围。 类型转换包括隐式转换和显式转换两种，这里先讲隐式转换，当中比较重要的一点就是，当我们给一个无符号类型的变量赋一个超出它本身范围的值时，其结果会变成初始值对该无符号类型范围最大值取模后的余数。例如，-1赋给unsigned时，-1%256&#x3D;255，结果为255。 举一些比较有意思的例子： 123unsigned u=10;int i=-42;std::cout&lt;&lt;u+i&lt;&lt;std::endl; 当上面的u与i相加时，i会转变成无符号类型unsigned int，把-42赋给无符号类型整数，然后再与u相加，得出一个非预期的结果，具体需要看机器是多少位的。 12for(unsigned i=10;i&gt;=0;--i) std::cout&lt;&lt;i&lt;&lt;std::endl; 上面的结果是：循环永远不会结束。因为在循环到-1时，unsigned没法表示-1，因此会将-1转换成unsigned int类型，得出一个很大的整数，最后导致死循环。 切勿混用带符号类型和无符号类型。 字面值常量表示的是值的本身，如42表示整型字面量，true表示bool型字面量 整型字面量可以用十进制，八进制（0开头），十六进制（0x或0X开头）来表示，如42，042，0xF等。 字符串字面值结尾会带’\\0’来标识字符串结束，单引号用于表示单个字符，双引号用于表示单个字符串。 123456char c = &#x27;a&#x27;;std::string str = &quot;a string&quot;;std::cout &lt;&lt; &quot;a long string string string&quot; &quot;string a string &quot; &lt;&lt; std::endl;//遇到过长的字符串时，可以分多行来进行表示//上述表示&quot;a long string string string string a string&quot;这单独的一个字符串 转义字符用于表示一类特殊含义的字符和一类特殊标点符号的字符（？等）","categories":[{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"}],"tags":[{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"随笔三","slug":"随笔三","date":"2023-01-07T03:15:33.000Z","updated":"2023-01-08T11:04:28.050Z","comments":true,"path":"2023/01/07/随笔三/","link":"","permalink":"http://example.com/2023/01/07/%E9%9A%8F%E7%AC%94%E4%B8%89/","excerpt":"","text":"前段时间在B站写专栏，发现了一个很头疼的问题：每篇文章在提交审核通过后只允许修改三次（吐血），我就想着找另外一些方式来记录博客。 在跟同学谈到写博客方面时，同学说我为啥不自己搭建一个私人博客。我想了想，哎，也对啊，无非就是又要去学一些新技术而已，问题不大，于是抱着试一试的想法，查阅了相关资料。 网上的大佬很给了很多相关建议，大致有两种方案：要么就是自己买个服务器和域名，自己写页面和后台逻辑，要么就是用GitHub来搭。前一种的思路倒是很寻常的一种方式，但是后面一种我是压根听都没听说过，于是乎，我又查阅了一些相关的案例，发现用GitHub搭建起来几乎0成本，而且学习成本也不大。头一次接触到Hexo框架，对我来说，这玩意真是个新奇事儿。啪的一下很快啊，我就开始着手修改相关配置文件和学了一些markdown的用法，就有了现在这样的Bolg。 建这个Bolg基本没有用到什么非常有含金量的技术，主要就是改改yaml配置文件（我压根就没学过yaml，学了也忘了），而且公司的事情很多，加上我只想多写些博客，专注于博客的内容，而不是真跑去重新捡回学过的前端知识，那样太费劲了！俺暂时还不想花那么多时间学这些用不上的知识，毕竟我的主攻方向是Linux开发方面。 好了，也就唠嗑唠到这了，也感谢那些在我B站博客下面学习的小伙伴们在支持着我（虽然只有每篇文章评价只十几的浏览量），想要看我的文章，请后续继续关注本站，本站也不停地完善中，后面会越来越花里胡哨（滑稽）。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"http://example.com/tags/%E6%97%A5%E5%B8%B8/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"随笔二","slug":"随笔二","date":"2023-01-02T01:45:00.000Z","updated":"2023-01-08T11:03:50.815Z","comments":true,"path":"2023/01/02/随笔二/","link":"","permalink":"http://example.com/2023/01/02/%E9%9A%8F%E7%AC%94%E4%BA%8C/","excerpt":"","text":"新的一年，希望各位都能有个新的开始。我在新年的第一天就风尘仆仆地赶回老家，参加完高中同学的婚礼后，又急匆匆地回到了武汉。 路途虽然遥远，但也饶有风趣：坐地铁头次被一群老外围着问江汉路站台的位置在哪，却羞于表达而紧张到答非所问，导致自己开始怀疑自己的英语水平，好像白学了那么多年英语；久别重逢的好基友预定好了酒店后，翻来覆去睡不着，便不停地闲聊过去的往事，直至凌晨才睡；被新郎点上台抢新娘子的手捧花，却没有抢到。 老同学们那熟悉的面孔让我回忆起高中的很多陈年旧事，以及他们与我一起经历过的快乐和痛苦。眼看着身边的同学一个个都步入婚姻的殿堂，他们在婚礼舞台上那掩饰不住的笑容，心里也不由得为他们感到高兴，这也意味着大家结婚后都会更倾向于过好各自的小日子，相聚机会也会越来越少，待到重逢之时又是何年何月?或许这也是常态吧，毕竟每个人都要为生活四处奔波，天下也没有不散的宴席。再转过头来看看自己，想要亲身体验到这种幸福感还有很远的路要走。 有人住高楼，有人在深沟，有人光万丈，有人一身锈，世人万千种，浮云莫去求，斯人若彩虹，遇上方知有。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"http://example.com/tags/%E6%97%A5%E5%B8%B8/"},{"name":"感慨","slug":"感慨","permalink":"http://example.com/tags/%E6%84%9F%E6%85%A8/"},{"name":"婚姻","slug":"婚姻","permalink":"http://example.com/tags/%E5%A9%9A%E5%A7%BB/"}]},{"title":"随笔一","slug":"随笔一","date":"2022-12-27T13:28:00.000Z","updated":"2023-01-08T14:56:02.086Z","comments":true,"path":"2022/12/27/随笔一/","link":"","permalink":"http://example.com/2022/12/27/%E9%9A%8F%E7%AC%94%E4%B8%80/","excerpt":"","text":"前段时间，突然阳了，便请假回家休息了大概一个星期左右。在家休息的这段时间让我看清了同事之间所谓的人间情怀。 平日里那些跟我无所不谈，关系融洽的同事们，没有一个对我的身体情况以及恢复的如何感兴趣，领导也在督促着我要完成该要完成的任务，貌似对我阳了的事情并不怎么关心。我一直寻思着，平时我都待这些同事不薄，都会尽力地想着与他们好好去相处，但在我遇到困难之时，一个个就想要疏远我，但是想想就觉得没啥，因为想的太多又过于自作多情。只不过是对于周围同事的这种为人处世态度，感到诧异。 生而为人，我们之间多多少少需要些“人情味”，毕竟不是冷血动物，能认识就是一种缘分。 在最艰难的时刻我们要建立人与人之间的连接，相互扶持相互鼓励。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"http://example.com/tags/%E6%97%A5%E5%B8%B8/"},{"name":"人情世故","slug":"人情世故","permalink":"http://example.com/tags/%E4%BA%BA%E6%83%85%E4%B8%96%E6%95%85/"},{"name":"感慨","slug":"感慨","permalink":"http://example.com/tags/%E6%84%9F%E6%85%A8/"}]}],"categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"},{"name":"汇编语言","slug":"汇编语言","permalink":"http://example.com/categories/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/"},{"name":"C/C++","slug":"C-C","permalink":"http://example.com/categories/C-C/"}],"tags":[{"name":"日常","slug":"日常","permalink":"http://example.com/tags/%E6%97%A5%E5%B8%B8/"},{"name":"番剧","slug":"番剧","permalink":"http://example.com/tags/%E7%95%AA%E5%89%A7/"},{"name":"入坑","slug":"入坑","permalink":"http://example.com/tags/%E5%85%A5%E5%9D%91/"},{"name":"编程","slug":"编程","permalink":"http://example.com/tags/%E7%BC%96%E7%A8%8B/"},{"name":"汇编","slug":"汇编","permalink":"http://example.com/tags/%E6%B1%87%E7%BC%96/"},{"name":"心情","slug":"心情","permalink":"http://example.com/tags/%E5%BF%83%E6%83%85/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"感慨","slug":"感慨","permalink":"http://example.com/tags/%E6%84%9F%E6%85%A8/"},{"name":"婚姻","slug":"婚姻","permalink":"http://example.com/tags/%E5%A9%9A%E5%A7%BB/"},{"name":"人情世故","slug":"人情世故","permalink":"http://example.com/tags/%E4%BA%BA%E6%83%85%E4%B8%96%E6%95%85/"}]}